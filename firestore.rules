rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // User profiles - users can read all profiles but only write their own
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Items - authenticated users can read all active items
    // Only item owners can create/update/delete their own items
    match /items/{itemId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth != null && request.auth.uid == resource.data.ownerId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
    }
    
    // Conversations - only participants can read/write
    match /conversations/{conversationId} {
      // Allow get/read if user is a participant
      allow get: if request.auth != null && request.auth.uid in resource.data.participants;
      // Allow list/query if authenticated (filtering is done in the query with arrayContains)
      allow list: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.participants;
      allow update: if request.auth != null && request.auth.uid in resource.data.participants;
      allow delete: if request.auth != null && request.auth.uid in resource.data.participants;
    }
    
    // Messages - conversation participants can read, only senders can create
    match /messages/{messageId} {
      // Allow authenticated users to read and query messages (filtering done in query)
      allow get: if request.auth != null;
      allow list: if request.auth != null;
      // Allow users to create messages where they are the sender
      allow create: if request.auth != null && 
                      request.auth.uid == request.resource.data.senderId &&
                      request.resource.data.conversationId != null;
      // Allow marking messages as read
      allow update: if request.auth != null && 
                      (request.auth.uid == resource.data.senderId || 
                       request.resource.data.keys().hasOnly(['isRead']) &&
                       request.resource.data.isRead == true);
    }
    
    // Trade Offers - authenticated users can query to check for existing offers
    match /tradeOffers/{tradeId} {
      // Allow reading for authenticated users (app logic ensures proper filtering)
      allow read: if request.auth != null;
      
      allow create: if request.auth != null && 
                      request.auth.uid == request.resource.data.fromUserId &&
                      request.resource.data.status == 'pending';
      allow update: if request.auth != null && 
                      (request.auth.uid == resource.data.fromUserId || 
                       request.auth.uid == resource.data.toUserId) &&
                      // Only allow status updates by appropriate user
                      (request.auth.uid == resource.data.toUserId || 
                       request.resource.data.status in ['cancelled', 'completed']);
    }
    
    // Ratings - anyone can read, only raters can create; ensure tradeId present
    match /ratings/{ratingId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.fromUserId &&
                    request.resource.data.tradeId is string &&
                    request.resource.data.toUserId is string &&
                    request.resource.data.rating is int;
    }
    
    // Favorites - users can only manage their own favorites
    match /favorites/{favoriteId} {
      allow read, list: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Reviews - anyone can read, only reviewers can write
    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.reviewerId;
    }
    
    // Notifications - users can only read/write their own notifications
    // New (subcollection under user):
    match /users/{userId}/notifications/{notificationId} {
      allow read, list: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // FCM tokens - per user device tokens
    match /users/{userId}/fcmTokens/{tokenId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Legacy top-level notifications (if still used)
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
  }
}
