# 📱 Boğaziçi Barter Flutter PRD - Tam Kapsamlı Teknik Dokümantasyon

## 🎯 Executive Summary

| Özellik | Detay |
|---------|-------|
| **Proje Adı** | Boğaziçi Barter |
| **Platform** | Flutter (iOS & Android) |
| **Versiyon** | 1.0.0 |
| **Min SDK** | iOS 12.0 / Android 5.0 (API 21) |
| **Backend** | Node.js + Express + MongoDB/PostgreSQL |
| **Ödeme Sistemleri** | Papara, Tosla, İyzico, BKM Express, Paycell, Param, PayTR |
| **Dil Desteği** | TR (varsayılan), EN, AR |
| **Hedef Kullanıcı** | 10K aktif kullanıcı (3 ay) |

---

## 📋 İçindekiler

1. [Teknik Mimari](#teknik-mimari)
2. [Ödeme Sistemleri Entegrasyonu](#ödeme-sistemleri)
3. [Kullanıcı Akışları](#kullanıcı-akışları)
4. [API Spesifikasyonu](#api-spesifikasyonu)
5. [Güvenlik Gereksinimleri](#güvenlik)
6. [Veritabanı Şeması](#veritabanı)
7. [State Management](#state-management)
8. [Test Stratejisi](#test-stratejisi)
9. [CI/CD Pipeline](#cicd)
10. [Performans Metrikleri](#performans)

---

## 1. Teknik Mimari {#teknik-mimari}

### 1.1 Clean Architecture Katmanları

```yaml
# pubspec.yaml
name: bogazici_barter
description: Türkiye'nin ilk akıllı barter platformu
version: 1.0.0+1

environment:
  sdk: ">=3.0.0 <4.0.0"

dependencies:
  flutter:
    sdk: flutter
  
  # Core
  flutter_bloc: ^8.1.3
  equatable: ^2.0.5
  get_it: ^7.6.4
  injectable: ^2.3.2
  dartz: ^0.10.1
  
  # Network
  dio: ^5.4.0
  retrofit: ^4.0.3
  pretty_dio_logger: ^1.3.1
  connectivity_plus: ^5.0.2
  
  # Storage
  shared_preferences: ^2.2.2
  flutter_secure_storage: ^9.0.0
  hive: ^2.2.3
  hive_flutter: ^1.1.0
  
  # Firebase
  firebase_core: ^2.24.0
  firebase_auth: ^4.17.0
  cloud_firestore: ^4.15.0
  firebase_storage: ^11.6.0
  firebase_messaging: ^14.7.0
  firebase_crashlytics: ^3.4.0
  firebase_analytics: ^10.8.0
  
  # UI/UX
  flutter_screenutil: ^5.9.0
  cached_network_image: ^3.3.1
  shimmer: ^3.0.0
  lottie: ^3.0.0
  flutter_svg: ^2.0.9
  photo_view: ^0.14.0
  image_picker: ^1.0.4
  image_cropper: ^5.0.1
  
  # Forms & Validation
  flutter_form_builder: ^9.1.1
  form_builder_validators: ^9.1.0
  mask_text_input_formatter: ^2.7.0
  
  # Payment SDKs
  iyzico_flutter: ^1.0.0 # custom package
  papara_sdk: ^1.0.0 # custom package
  tosla_payment: ^1.0.0 # custom package
  paytr_flutter: ^1.0.0 # custom package
  
  # Maps & Location
  google_maps_flutter: ^2.5.0
  geolocator: ^10.1.0
  geocoding: ^2.1.1
  
  # Localization
  easy_localization: ^3.0.3
  intl: ^0.18.1
  
  # Utils
  url_launcher: ^6.2.4
  permission_handler: ^11.2.0
  package_info_plus: ^5.0.1
  device_info_plus: ^9.1.1
  flutter_dotenv: ^5.1.0
  
  # Chat & Messaging
  stream_chat_flutter: ^6.8.0
  
  # State Inspection
  flutter_bloc_devtools: ^0.1.0

dev_dependencies:
  flutter_test:
    sdk: flutter
  flutter_lints: ^3.0.1
  build_runner: ^2.4.7
  json_serializable: ^6.7.1
  retrofit_generator: ^8.0.6
  injectable_generator: ^2.4.1
  hive_generator: ^2.0.1
  mockito: ^5.4.3
  bloc_test: ^9.1.5
  integration_test:
    sdk: flutter
```

### 1.2 Dependency Injection Container

```dart
// lib/injection_container.dart
import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';
import 'injection_container.config.dart';

final getIt = GetIt.instance;

@InjectableInit(
  initializerName: 'init',
  preferRelativeImports: true,
  asExtension: true,
)
Future<void> configureDependencies() async {
  await getIt.init();
}

@module
abstract class RegisterModule {
  @lazySingleton
  Dio get dio => Dio(BaseOptions(
    baseUrl: Environment.apiBaseUrl,
    connectTimeout: const Duration(seconds: 30),
    receiveTimeout: const Duration(seconds: 30),
  ))..interceptors.addAll([
    AuthInterceptor(getIt()),
    LoggingInterceptor(),
    ErrorInterceptor(),
  ]);
  
  @lazySingleton
  SharedPreferences get prefs => SharedPreferences.getInstance();
  
  @lazySingleton
  FlutterSecureStorage get secureStorage => const FlutterSecureStorage();
  
  // Payment Services
  @lazySingleton
  PaparaService get paparaService => PaparaService(getIt());
  
  @lazySingleton
  IyzicoService get iyzicoService => IyzicoService(getIt());
  
  @lazySingleton
  ToslaService get toslaService => ToslaService(getIt());
  
  @lazySingleton
  PaymentManager get paymentManager => PaymentManager(
    papara: getIt(),
    iyzico: getIt(),
    tosla: getIt(),
  );
}
```

---

## 2. Ödeme Sistemleri Entegrasyonu {#ödeme-sistemleri}

### 2.1 Unified Payment Interface

```dart
// lib/core/payment/payment_manager.dart
enum PaymentMethod {
  papara,
  tosla,
  iyzico,
  bkmExpress,
  paycell,
  param,
  paytr,
  creditCard,
  bankTransfer,
}

abstract class IPaymentService {
  Future<PaymentResult> processPayment(PaymentRequest request);
  Future<PaymentStatus> checkStatus(String paymentId);
  Future<RefundResult> refund(RefundRequest request);
  Future<bool> validateWebhook(Map<String, dynamic> payload);
}

class PaymentManager {
  final Map<PaymentMethod, IPaymentService> _services;
  
  PaymentManager({
    required PaparaService papara,
    required IyzicoService iyzico,
    required ToslaService tosla,
    // diğer servisler...
  }) : _services = {
    PaymentMethod.papara: papara,
    PaymentMethod.iyzico: iyzico,
    PaymentMethod.tosla: tosla,
  };
  
  Future<PaymentResult> pay({
    required PaymentMethod method,
    required double amount,
    required String currency,
    required String orderId,
    required Map<String, dynamic> metadata,
    PaymentCard? card,
    String? returnUrl,
  }) async {
    final service = _services[method];
    if (service == null) {
      throw UnsupportedPaymentMethodException(method);
    }
    
    final request = PaymentRequest(
      amount: amount,
      currency: currency,
      orderId: orderId,
      metadata: metadata,
      card: card,
      returnUrl: returnUrl ?? '${Environment.appScheme}://payment-return',
    );
    
    try {
      final result = await service.processPayment(request);
      
      // Log payment attempt
      await _logPaymentAttempt(method, request, result);
      
      // Handle 3D Secure if needed
      if (result.requires3DSecure) {
        return _handle3DSecure(result);
      }
      
      return result;
    } catch (e) {
      await _handlePaymentError(e, method, request);
      rethrow;
    }
  }
}
```

### 2.2 Papara Entegrasyonu

```dart
// lib/data/services/payment/papara_service.dart
@LazySingleton(as: IPaymentService)
class PaparaService implements IPaymentService {
  final Dio _dio;
  final CryptoService _crypto;
  
  static const String _baseUrl = 'https://merchant-api.papara.com';
  static const String _apiKey = String.fromEnvironment('PAPARA_API_KEY');
  static const String _secretKey = String.fromEnvironment('PAPARA_SECRET_KEY');
  
  PaparaService(this._dio, this._crypto);
  
  @override
  Future<PaymentResult> processPayment(PaymentRequest request) async {
    try {
      // Generate unique reference
      final reference = _generateReference(request.orderId);
      
      // Create payment request
      final paparaRequest = {
        'amount': request.amount,
        'referenceId': reference,
        'orderDescription': request.metadata['description'] ?? '',
        'notificationUrl': '${Environment.apiBaseUrl}/webhooks/papara',
        'redirectUrl': request.returnUrl,
        'turkishNationalId': request.metadata['tckn'], // KYC için
        'currency': 1, // TRY
      };
      
      // Sign request
      final signature = _crypto.generateHMAC(
        data: jsonEncode(paparaRequest),
        key: _secretKey,
      );
      
      final response = await _dio.post(
        '$_baseUrl/payments',
        data: paparaRequest,
        options: Options(
          headers: {
            'ApiKey': _apiKey,
            'Signature': signature,
            'Content-Type': 'application/json',
          },
        ),
      );
      
      return PaymentResult(
        success: response.data['succeeded'] == true,
        transactionId: response.data['data']['id'],
        paymentUrl: response.data['data']['paymentUrl'],
        amount: request.amount,
        currency: request.currency,
        method: PaymentMethod.papara,
        metadata: {
          'reference': reference,
          'createdAt': response.data['data']['createdAt'],
        },
      );
    } on DioException catch (e) {
      throw PaymentException(
        message: 'Papara payment failed',
        code: e.response?.statusCode ?? 0,
        details: e.response?.data,
      );
    }
  }
  
  @override
  Future<bool> validateWebhook(Map<String, dynamic> payload) async {
    final providedSignature = payload['signature'];
    final data = payload['data'];
    
    final expectedSignature = _crypto.generateHMAC(
      data: jsonEncode(data),
      key: _secretKey,
    );
    
    return providedSignature == expectedSignature;
  }
}
```

### 2.3 İyzico Marketplace Entegrasyonu

```dart
// lib/data/services/payment/iyzico_service.dart
@LazySingleton(as: IPaymentService)
class IyzicoService implements IPaymentService {
  final Dio _dio;
  
  static const String _baseUrl = 'https://api.iyzipay.com';
  static const String _apiKey = String.fromEnvironment('IYZICO_API_KEY');
  static const String _secretKey = String.fromEnvironment('IYZICO_SECRET_KEY');
  
  @override
  Future<PaymentResult> processPayment(PaymentRequest request) async {
    try {
      // Marketplace payment with sub-merchant
      final iyzicoRequest = {
        'locale': 'tr',
        'conversationId': request.orderId,
        'price': request.amount.toString(),
        'paidPrice': request.amount.toString(),
        'currency': 'TRY',
        'installment': '1',
        'basketId': request.orderId,
        'paymentChannel': 'WEB',
        'paymentGroup': 'PRODUCT',
        'callbackUrl': request.returnUrl,
        
        // Buyer info
        'buyer': {
          'id': request.metadata['buyerId'],
          'name': request.metadata['buyerName'],
          'surname': request.metadata['buyerSurname'],
          'identityNumber': request.metadata['tckn'],
          'email': request.metadata['email'],
          'gsmNumber': request.metadata['phone'],
          'registrationAddress': request.metadata['address'],
          'city': request.metadata['city'],
          'country': 'Turkey',
          'ip': request.metadata['ip'],
        },
        
        // Basket items with sub-merchant info
        'basketItems': [
          {
            'id': request.metadata['itemId'],
            'name': request.metadata['itemName'],
            'category1': request.metadata['category'],
            'itemType': 'PHYSICAL',
            'price': request.amount.toString(),
            'subMerchantKey': request.metadata['sellerId'],
            'subMerchantPrice': (request.amount * 0.975).toString(), // %2.5 komisyon
          }
        ],
        
        // Payment card
        if (request.card != null) 'paymentCard': {
          'cardHolderName': request.card!.holderName,
          'cardNumber': request.card!.number,
          'expireMonth': request.card!.expMonth,
          'expireYear': request.card!.expYear,
          'cvc': request.card!.cvv,
          'registerCard': '0',
        },
      };
      
      // Generate auth header
      final authHeader = _generateAuthHeader(iyzicoRequest);
      
      final response = await _dio.post(
        '$_baseUrl/payment/auth',
        data: iyzicoRequest,
        options: Options(
          headers: {
            'Authorization': authHeader,
            'Content-Type': 'application/json',
            'x-iyzi-client-version': 'iyzipay-flutter-1.0.0',
          },
        ),
      );
      
      if (response.data['status'] == 'success') {
        return PaymentResult(
          success: true,
          transactionId: response.data['paymentId'],
          paymentUrl: response.data['threeDSHtmlContent'] != null 
            ? _create3DSecurePage(response.data['threeDSHtmlContent'])
            : null,
          requires3DSecure: response.data['threeDSHtmlContent'] != null,
          amount: request.amount,
          currency: 'TRY',
          method: PaymentMethod.iyzico,
        );
      } else {
        throw PaymentException(
          message: response.data['errorMessage'] ?? 'Payment failed',
          code: response.data['errorCode'] ?? 'UNKNOWN',
        );
      }
    } catch (e) {
      throw PaymentException(
        message: 'İyzico payment error: ${e.toString()}',
      );
    }
  }
  
  String _generateAuthHeader(Map<String, dynamic> request) {
    final requestString = jsonEncode(request);
    final hashedRequest = base64.encode(
      sha256.convert(utf8.encode(requestString)).bytes
    );
    
    final authString = '$_apiKey:$_secretKey:$hashedRequest';
    return 'IYZWS ${base64.encode(utf8.encode(authString))}';
  }
}
```

---

## 3. Kullanıcı Akışları {#kullanıcı-akışları}

### 3.1 Kayıt & KYC Akışı

```dart
// lib/presentation/pages/auth/kyc_verification_page.dart
class KYCVerificationPage extends StatefulWidget {
  @override
  Widget build(BuildContext context) {
    return BlocConsumer<KYCBloc, KYCState>(
      listener: (context, state) {
        if (state is KYCVerified) {
          context.router.replace(const HomeRoute());
        }
      },
      builder: (context, state) {
        return Scaffold(
          body: KYCWizard(
            steps: [
              // Step 1: TC Kimlik Bilgileri
              TCIdentityStep(
                onComplete: (data) {
                  context.read<KYCBloc>().add(VerifyTCKN(data));
                },
              ),
              
              // Step 2: Yüz Tanıma
              FaceRecognitionStep(
                onCapture: (image) {
                  context.read<KYCBloc>().add(VerifyFace(image));
                },
              ),
              
              // Step 3: Kimlik Kartı Okuma (NFC)
              IDCardScanStep(
                useNFC: true,
                onScan: (cardData) {
                  context.read<KYCBloc>().add(VerifyIDCard(cardData));
                },
              ),
              
              // Step 4: Adres Doğrulama
              AddressVerificationStep(
                onVerify: (address) {
                  context.read<KYCBloc>().add(VerifyAddress(address));
                },
              ),
            ],
          ),
        );
      },
    );
  }
}
```

### 3.2 İlan Oluşturma Wizard

```dart
// lib/presentation/pages/listing/create_listing/create_listing_page.dart
class CreateListingPage extends StatefulWidget {
  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (_) => getIt<CreateListingBloc>(),
      child: CreateListingWizard(),
    );
  }
}

class CreateListingWizard extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return BlocBuilder<CreateListingBloc, CreateListingState>(
      builder: (context, state) {
        return Scaffold(
          appBar: AppBar(
            title: Text('İlan Oluştur'),
            bottom: StepProgressIndicator(
              totalSteps: 6,
              currentStep: state.currentStep,
            ),
          ),
          body: IndexedStack(
            index: state.currentStep - 1,
            children: [
              // Step 1: Kategori Seçimi
              CategorySelectionStep(
                categories: state.categories,
                onSelect: (category) {
                  context.read<CreateListingBloc>().add(
                    SelectCategory(category),
                  );
                },
              ),
              
              // Step 2: Ürün/Hizmet Detayları
              DetailsStep(
                onComplete: (details) {
                  context.read<CreateListingBloc>().add(
                    AddDetails(details),
                  );
                },
                fields: [
                  FormField(
                    name: 'title',
                    label: 'Başlık',
                    validator: Validators.required,
                    maxLength: 70,
                  ),
                  FormField(
                    name: 'description',
                    label: 'Açıklama',
                    validator: Validators.minLength(50),
                    maxLength: 2000,
                    lines: 5,
                  ),
                  FormField(
                    name: 'condition',
                    label: 'Durum',
                    type: FieldType.dropdown,
                    options: ['Sıfır', 'İkinci El', 'Defolu'],
                  ),
                  FormField(
                    name: 'brand',
                    label: 'Marka',
                    type: FieldType.autocomplete,
                  ),
                ],
              ),
              
              // Step 3: Medya Yükleme
              MediaUploadStep(
                maxImages: 10,
                maxVideoSize: 100 * 1024 * 1024, // 100MB
                onUpload: (media) {
                  context.read<CreateListingBloc>().add(
                    UploadMedia(media),
                  );
                },
                requirements: MediaRequirements(
                  minImages: 3,
                  maxImages: 10,
                  allowVideo: true,
                  maxVideoLength: Duration(minutes: 1),
                  imageQuality: ImageQuality.high,
                  watermark: true,
                ),
              ),
              
              // Step 4: Fiyat & Barter Şartları
              PricingStep(
                onComplete: (pricing) {
                  context.read<CreateListingBloc>().add(
                    SetPricing(pricing),
                  );
                },
                fields: [
                  // Nakit fiyat
                  PriceField(
                    name: 'cashPrice',
                    label: 'Nakit Fiyat (Opsiyonel)',
                    currency: 'TRY',
                    required: false,
                  ),
                  
                  // Barter seçenekleri
                  BarterOptionsField(
                    name: 'barterOptions',
                    label: 'Kabul Edilen Barter Seçenekleri',
                    options: [
                      BarterOption(
                        type: BarterType.directSwap,
                        label: 'Direkt Takas',
                        description: 'Başka bir ürün/hizmet ile direkt değişim',
                      ),
                      BarterOption(
                        type: BarterType.swapWithCash,
                        label: 'Takas + Nakit Fark',
                        description: 'Ürün + belirli miktar nakit',
                        enableCashDifference: true,
                      ),
                      BarterOption(
                        type: BarterType.barterPool,
                        label: 'Barter Havuzu',
                        description: 'Çoklu ürün değişimi için havuz',
                        enablePoolSettings: true,
                      ),
                    ],
                  ),
                  
                  // Barter havuzu ayarları
                  BarterPoolSettings(
                    minValue: 100,
                    maxValue: 100000,
                    commission: 0.025, // %2.5
                    escrowEnabled: true,
                  ),
                ],
              ),
              
              // Step 5: Teslimat & Konum
              DeliveryStep(
                onComplete: (delivery) {
                  context.read<CreateListingBloc>().add(
                    SetDelivery(delivery),
                  );
                },
                options: [
                  DeliveryOption.inPerson,
                  DeliveryOption.cargo,
                  DeliveryOption.both,
                ],
                cargoProviders: [
                  'Aras Kargo',
                  'Yurtiçi Kargo',
                  'MNG Kargo',
                  'PTT Kargo',
                  'Sürat Kargo',
                ],
              ),
              
              // Step 6: Önizleme & Gönder
              ReviewStep(
                listing: state.draft,
                onSubmit: () {
                  context.read<CreateListingBloc>().add(
                    SubmitListing(),
                  );
                },
                onEdit: (step) {
                  context.read<CreateListingBloc>().add(
                    GoToStep(step),
                  );
                },
              ),
            ],
          ),
          bottomNavigationBar: WizardNavigation(
            currentStep: state.currentStep,
            totalSteps: 6,
            onNext: () {
              context.read<CreateListingBloc>().add(NextStep());
            },
            onPrevious: () {
              context.read<CreateListingBloc>().add(PreviousStep());
            },
            canProceed: state.canProceed,
          ),
        );
      },
    );
  }
}
```

---

## 4. API Spesifikasyonu {#api-spesifikasyonu}

### 4.1 RESTful API Endpoints

```yaml
# API Base URL: https://api.bogazicibarter.com/v1

Authentication:
  POST   /auth/register
  POST   /auth/login
  POST   /auth/refresh
  POST   /auth/logout
  POST   /auth/verify-otp
  POST   /auth/resend-otp
  POST   /auth/forgot-password
  POST   /auth/reset-password

KYC & Verification:
  POST   /kyc/verify-identity
  POST   /kyc/verify-face
  POST   /kyc/verify-address
  GET    /kyc/status
  POST   /kyc/documents

Users:
  GET    /users/profile
  PUT    /users/profile
  DELETE /users/account
  GET    /users/{id}
  GET    /users/{id}/reviews
  POST   /users/{id}/report
  POST   /users/{id}/block

Listings:
  GET    /listings                 # List with filters
  GET    /listings/{id}             # Get single
  POST   /listings                  # Create
  PUT    /listings/{id}             # Update
  DELETE /listings/{id}             # Delete
  POST   /listings/{id}/favorite    # Add to favorites
  DELETE /listings/{id}/favorite    # Remove from favorites
  GET    /listings/{id}/offers      # Get offers for listing
  POST   /listings/{id}/report      # Report listing
  
  # Filters
  GET    /listings?category={}&city={}&minPrice={}&maxPrice={}
  GET    /listings?barterType={}&sortBy={}&page={}&limit={}

Barter Offers:
  GET    /offers                    # My offers
  GET    /offers/{id}               # Get single offer
  POST   /offers                    # Create offer
  PUT    /offers/{id}               # Update offer
  DELETE /offers/{id}               # Cancel offer
  POST   /offers/{id}/accept        # Accept offer
  POST   /offers/{id}/reject        # Reject offer
  POST   /offers/{id}/counter       # Counter offer

Transactions:
  GET    /transactions              # List transactions
  GET    /transactions/{id}         # Get single
  POST   /transactions/{id}/complete
  POST   /transactions/{id}/cancel
  POST   /transactions/{id}/dispute

Payments:
  POST   /payments/calculate-fee
  POST   /payments/process
  GET    /payments/{id}/status
  POST   /payments/{id}/refund
  POST   /payments/webhooks/{provider}

Chat:
  GET    /conversations
  GET    /conversations/{id}
  POST   /conversations
  GET    /conversations/{id}/messages
  POST   /conversations/{id}/messages
  POST   /conversations/{id}/read
  DELETE /conversations/{id}

Notifications:
  GET    /notifications
  PUT    /notifications/{id}/read
  PUT    /notifications/read-all
  DELETE /notifications/{id}
  GET    /notifications/settings
  PUT    /notifications/settings

Admin:
  GET    /admin/dashboard
  GET    /admin/listings/pending
  POST   /admin/listings/{id}/approve
  POST   /admin/listings/{id}/reject
  GET    /admin/users
  POST   /admin/users/{id}/suspend
  GET    /admin/reports
  GET    /admin/analytics

Utils:
  GET    /categories
  GET    /cities
  GET    /brands
  POST   /upload/image
  POST   /upload/video
  GET    /config/app
  GET    /config/payment-methods
```

### 4.2 WebSocket Events

```javascript
// WebSocket URL: wss://api.bogazicibarter.com/ws

// Client -> Server Events
{
  "join_conversation": { "conversationId": "uuid" },
  "leave_conversation": { "conversationId": "uuid" },
  "send_message": { 
    "conversationId": "uuid",
    "text": "string",
    "attachments": []
  },
  "typing": { "conversationId": "uuid" },
  "read_messages": { "conversationId": "uuid" },
  "update_presence": { "status": "online|away|offline" }
}

// Server -> Client Events
{
  "new_message": { /* message data */ },
  "message_read": { /* read receipt */ },
  "user_typing": { "userId": "uuid", "conversationId": "uuid" },
  "user_presence": { "userId": "uuid", "status": "online" },
  "new_offer": { /* offer data */ },
  "offer_updated": { /* offer data */ },
  "listing_approved": { /* listing data */ },
  "payment_completed": { /* payment data */ }
}
```

---

## 5. Güvenlik Gereksinimleri {#güvenlik}

### 5.1 Authentication & Authorization

```dart
// lib/core/security/auth_manager.dart
class AuthManager {
  static const Duration _accessTokenExpiry = Duration(minutes: 15);
  static const Duration _refreshTokenExpiry = Duration(days: 30);
  
  final SecureStorage _secureStorage;
  final CryptoService _crypto;
  final BiometricService _biometric;
  
  Future<AuthTokens> authenticate({
    required String username,
    required String password,
    bool useBiometric = false,
  }) async {
    // Validate input
    if (!_isValidUsername(username)) {
      throw InvalidCredentialsException();
    }
    
    // Check for rate limiting
    await _checkRateLimit(username);
    
    // Hash password with salt
    final hashedPassword = await _crypto.hashPassword(
      password: password,
      salt: await _getSalt(username),
    );
    
    // Biometric authentication if enabled
    if (useBiometric) {
      final biometricResult = await _biometric.authenticate();
      if (!biometricResult) {
        throw BiometricAuthenticationFailedException();
      }
    }
    
    // API call
    final response = await _authApi.login(
      username: username,
      password: hashedPassword,
      deviceId: await _getDeviceId(),
      deviceInfo: await _getDeviceInfo(),
    );
    
    // Store tokens securely
    await _secureStorage.store(
      key: 'access_token',
      value: response.accessToken,
      encrypted: true,
    );
    
    await _secureStorage.store(
      key: 'refresh_token',
      value: response.refreshToken,
      encrypted: true,
    );
    
    // Setup token refresh timer
    _setupTokenRefresh();
    
    return response;
  }
  
  Future<void> _setupTokenRefresh() async {
    Timer.periodic(
      _accessTokenExpiry - const Duration(minutes: 1),
      (_) => refreshToken(),
    );
  }
}
```

### 5.2 Data Encryption

```dart
// lib/core/security/encryption_service.dart
class EncryptionService {
  static const String _algorithm = 'AES-256-GCM';
  
  final Uint8List _key;
  
  EncryptionService() : _key = _generateKey();
  
  static Uint8List _generateKey() {
    final random = Random.secure();
    return Uint8List.fromList(
      List.generate(32, (_) => random.nextInt(256)),
    );
  }
  
  Future<EncryptedData> encrypt(String plainText) async {
    final iv = _generateIV();
    final cipher = AesGcm(secretKey: _key);
    
    final encrypted = await cipher.encrypt(
      Uint8List.fromList(utf8.encode(plainText)),
      nonce: iv,
    );
    
    return EncryptedData(
      data: base64.encode(encrypted),
      iv: base64.encode(iv),
      tag: base64.encode(cipher.mac),
    );
  }
  
  Future<String> decrypt(EncryptedData encryptedData) async {
    final cipher = AesGcm(secretKey: _key);
    
    final decrypted = await cipher.decrypt(
      base64.decode(encryptedData.data),
      nonce: base64.decode(encryptedData.iv),
      mac: base64.decode(encryptedData.tag),
    );
    
    return utf8.decode(decrypted);
  }
}
```

---

## 6. Veritabanı Şeması {#veritabanı}

### 6.1 MongoDB Collections

```javascript
// Users Collection
{
  "_id": "ObjectId",
  "username": "string",
  "email": "string",
  "phone": "string",
  "password": "hashed",
  "profile": {
    "firstName": "string",
    "lastName": "string",
    "avatar": "url",
    "bio": "string",
    "birthDate": "date",
    "gender": "enum",
    "location": {
      "city": "string",
      "district": "string",
      "coordinates": {
        "lat": "number",
        "lng": "number"
      }
    }
  },
  "kyc": {
    "status": "enum: pending|verified|rejected",
    "tckn": "encrypted",
    "verifiedAt": "date",
    "documents": []
  },
  "settings": {
    "language": "tr|en|ar",
    "notifications": {
      "push": "boolean",
      "email": "boolean",
      "sms": "boolean"
    },
    "privacy": {
      "showPhone": "boolean",
      "showEmail": "boolean"
    }
  },
  "stats": {
    "totalListings": "number",
    "completedBarters": "number",
    "rating": "number",
    "reviewCount": "number"
  },
  "subscription": {
    "type": "enum: free|premium|pro",
    "expiresAt": "date",
    "features": []
  },
  "wallet": {
    "balance": "number",
    "currency": "TRY",
    "transactions": []
  },
  "createdAt": "date",
  "updatedAt": "date",
  "lastLoginAt": "date",
  "status": "enum: active|suspended|deleted"
}

// Listings Collection
{
  "_id": "ObjectId",
  "userId": "ObjectId",
  "title": "string",
  "description": "string",
  "category": {
    "main": "string",
    "sub": "string",
    "tags": []
  },
  "media": [
    {
      "type": "image|video",
      "url": "string",
      "thumbnail": "string",
      "order": "number"
    }
  ],
  "pricing": {
    "cashPrice": "number",
    "currency": "TRY",
    "negotiable": "boolean",
    "barterOptions": {
      "acceptDirectSwap": "boolean",
      "acceptSwapWithCash": "boolean",
      "acceptBarterPool": "boolean",
      "preferredItems": [],
      "minCashDifference": "number",
      "maxCashDifference": "number"
    }
  },
  "condition": "enum: new|used|defective",
  "brand": "string",
  "model": "string",
  "year": "number",
  "delivery": {
    "methods": ["inPerson", "cargo"],
    "cargoProviders": [],
    "shippingCost": "number",
    "estimatedDays": "number"
  },
  "location": {
    "city": "string",
    "district": "string",
    "neighborhood": "string",
    "coordinates": {
      "lat": "number",
      "lng": "number"
    }
  },
  "status": "enum: draft|pending|active|sold|expired|deleted",
  "moderation": {
    "status": "enum: pending|approved|rejected",
    "reviewedBy": "ObjectId",
    "reviewedAt": "date",
    "rejectionReason": "string",
    "level": "enum: low|medium|high"
  },
  "stats": {
    "views": "number",
    "favorites": "number",
    "offers": "number",
    "shares": "number"
  },
  "boost": {
    "isBoosted": "boolean",
    "boostType": "enum: featured|premium|standard",
    "boostExpiresAt": "date"
  },
  "createdAt": "date",
  "updatedAt": "date",
  "expiresAt": "date"
}

// Offers Collection
{
  "_id": "ObjectId",
  "listingId": "ObjectId",
  "sellerId": "ObjectId",
  "buyerId": "ObjectId",
  "type": "enum: direct_swap|swap_with_cash|barter_pool",
  "offer": {
    "items": [
      {
        "listingId": "ObjectId",
        "title": "string",
        "value": "number"
      }
    ],
    "cashAmount": "number",
    "totalValue": "number",
    "message": "string"
  },
  "status": "enum: pending|accepted|rejected|countered|expired|cancelled",
  "counterOffer": {
    "items": [],
    "cashAmount": "number",
    "message": "string"
  },
  "conversation": {
    "id": "ObjectId",
    "lastMessage": "string",
    "unreadCount": "number"
  },
  "transaction": {
    "id": "ObjectId",
    "status": "enum",
    "escrowId": "string"
  },
  "createdAt": "date",
  "updatedAt": "date",
  "expiresAt": "date"
}

// Transactions Collection
{
  "_id": "ObjectId",
  "offerId": "ObjectId",
  "parties": {
    "seller": "ObjectId",
    "buyer": "ObjectId"
  },
  "items": {
    "fromSeller": [],
    "fromBuyer": []
  },
  "payment": {
    "amount": "number",
    "method": "enum",
    "provider": "string",
    "transactionId": "string",
    "status": "enum: pending|completed|failed|refunded",
    "escrow": {
      "enabled": "boolean",
      "releaseDate": "date",
      "status": "enum"
    }
  },
  "delivery": {
    "method": "enum",
    "trackingNumber": "string",
    "carrier": "string",
    "status": "enum",
    "estimatedDelivery": "date",
    "deliveredAt": "date"
  },
  "status": "enum: initiated|payment_pending|payment_completed|shipping|delivered|completed|disputed|cancelled",
  "timeline": [
    {
      "event": "string",
      "timestamp": "date",
      "details": "object"
    }
  ],
  "dispute": {
    "active": "boolean",
    "reason": "string",
    "openedBy": "ObjectId",
    "resolution": "string"
  },
  "reviews": {
    "fromSeller": "ObjectId",
    "fromBuyer": "ObjectId"
  },
  "createdAt": "date",
  "updatedAt": "date",
  "completedAt": "date"
}
```

---

## 7. State Management {#state-management}

### 7.1 Bloc Architecture

```dart
// lib/presentation/blocs/listing/listing_bloc.dart
@injectable
class ListingBloc extends Bloc<ListingEvent, ListingState> {
  final GetListingsUseCase _getListings;
  final CreateListingUseCase _createListing;
  final UpdateListingUseCase _updateListing;
  final DeleteListingUseCase _deleteListing;
  final CloudinaryService _cloudinary;
  final AnalyticsService _analytics;
  
  ListingBloc({
    required GetListingsUseCase getListings,
    required CreateListingUseCase createListing,
    required UpdateListingUseCase updateListing,
    required DeleteListingUseCase deleteListing,
    required CloudinaryService cloudinary,
    required AnalyticsService analytics,
  })  : _getListings = getListings,
        _createListing = createListing,
        _updateListing = updateListing,
        _deleteListing = deleteListing,
        _cloudinary = cloudinary,
        _analytics = analytics,
        super(ListingInitial()) {
    on<LoadListings>(_onLoadListings);
    on<CreateListing>(_onCreateListing);
    on<UpdateListing>(_onUpdateListing);
    on<DeleteListing>(_onDeleteListing);
    on<FilterListings>(_onFilterListings);
    on<SearchListings>(_onSearchListings);
  }
  
  Future<void> _onLoadListings(
    LoadListings event,
    Emitter<ListingState> emit,
  ) async {
    emit(ListingLoading());
    
    final result = await _getListings(
      GetListingsParams(
        page: event.page,
        limit: event.limit,
        filters: event.filters,
      ),
    );
    
    result.fold(
      (failure) => emit(ListingError(failure.message)),
      (listings) {
        _analytics.logEvent('listings_loaded', {
          'count': listings.length,
          'page': event.page,
        });
        emit(ListingLoaded(listings));
      },
    );
  }
  
  Future<void> _onCreateListing(
    CreateListing event,
    Emitter<ListingState> emit,
  ) async {
    emit(ListingCreating());
    
    try {
      // Upload media files
      final mediaUrls = <String>[];
      for (final file in event.mediaFiles) {
        final url = await _cloudinary.upload(
          file: file,
          folder: 'listings/${event.userId}',
          transformation: CloudinaryTransformation(
            width: 1200,
            height: 1200,
            crop: 'limit',
            quality: 'auto:good',
            fetchFormat: 'auto',
          ),
        );
        mediaUrls.add(url);
      }
      
      // Create listing
      final listing = ListingEntity(
        title: event.title,
        description: event.description,
        category: event.category,
        media: mediaUrls,
        pricing: event.pricing,
        location: event.location,
        delivery: event.delivery,
        userId: event.userId,
      );
      
      final result = await _createListing(
        CreateListingParams(listing: listing),
      );
      
      result.fold(
        (failure) => emit(ListingError(failure.message)),
        (createdListing) {
          _analytics.logEvent('listing_created', {
            'listing_id': createdListing.id,
            'category': createdListing.category,
            'has_barter': createdListing.pricing.barterOptions != null,
          });
          emit(ListingCreated(createdListing));
        },
      );
    } catch (e) {
      emit(ListingError('Failed to create listing: ${e.toString()}'));
    }
  }
}
```

---

## 8. Test Stratejisi {#test-stratejisi}

### 8.1 Unit Tests

```dart
// test/unit/domain/usecases/create_listing_test.dart
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/mockito.dart';
import 'package:dartz/dartz.dart';

class MockListingRepository extends Mock implements ListingRepository {}

void main() {
  late CreateListingUseCase useCase;
  late MockListingRepository mockRepository;
  
  setUp(() {
    mockRepository = MockListingRepository();
    useCase = CreateListingUseCase(mockRepository);
  });
  
  group('CreateListingUseCase', () {
    test('should create listing successfully', () async {
      // Arrange
      final listing = ListingEntity(
        title: 'Test Product',
        description: 'Test Description',
        category: 'Electronics',
        pricing: PricingEntity(
          cashPrice: 1000,
          currency: 'TRY',
          barterOptions: BarterOptionsEntity(
            acceptDirectSwap: true,
            acceptSwapWithCash: true,
          ),
        ),
      );
      
      when(mockRepository.createListing(any))
          .thenAnswer((_) async => Right(listing));
      
      // Act
      final result = await useCase(CreateListingParams(listing: listing));
      
      // Assert
      expect(result, Right(listing));
      verify(mockRepository.createListing(listing));
      verifyNoMoreInteractions(mockRepository);
    });
    
    test('should return failure when repository fails', () async {
      // Arrange
      final failure = ServerFailure('Server error');
      when(mockRepository.createListing(any))
          .thenAnswer((_) async => Left(failure));
      
      // Act
      final result = await useCase(CreateListingParams(listing: testListing));
      
      // Assert
      expect(result, Left(failure));
    });
  });
}
```

### 8.2 Widget Tests

```dart
// test/widget/presentation/pages/listing/listing_card_test.dart
import 'package:flutter_test/flutter_test.dart';
import 'package:flutter/material.dart';
import 'package:network_image_mock/network_image_mock.dart';

void main() {
  group('ListingCard Widget', () {
    testWidgets('displays listing information correctly', (tester) async {
      await mockNetworkImagesFor(() async {
        // Arrange
        final listing = ListingEntity(
          id: '123',
          title: 'iPhone 13',
          description: 'Excellent condition',
          media: ['https://example.com/image.jpg'],
          pricing: PricingEntity(
            cashPrice: 15000,
            currency: 'TRY',
          ),
          location: LocationEntity(
            city: 'İstanbul',
            district: 'Kadıköy',
          ),
        );
        
        // Act
        await tester.pumpWidget(
          MaterialApp(
            home: Scaffold(
              body: ListingCard(listing: listing),
            ),
          ),
        );
        
        // Assert
        expect(find.text('iPhone 13'), findsOneWidget);
        expect(find.text('15.000 ₺'), findsOneWidget);
        expect(find.text('İstanbul, Kadıköy'), findsOneWidget);
        expect(find.byType(CachedNetworkImage), findsOneWidget);
        
        // Test tap interaction
        await tester.tap(find.byType(ListingCard));
        await tester.pumpAndSettle();
        
        // Verify navigation occurred
        expect(find.byType(ListingDetailPage), findsOneWidget);
      });
    });
    
    testWidgets('shows barter badge when applicable', (tester) async {
      // Test for barter-enabled listings
      final barterListing = ListingEntity(
        // ... listing with barter options
      );
      
      await tester.pumpWidget(
        MaterialApp(
          home: ListingCard(listing: barterListing),
        ),
      );
      
      expect(find.byType(BarterBadge), findsOneWidget);
      expect(find.text('Takas'), findsOneWidget);
    });
  });
}
```

### 8.3 Integration Tests

```dart
// test/integration/auth_flow_test.dart
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();
  
  group('Authentication Flow', () {
    testWidgets('Complete registration and KYC process', (tester) async {
      // Start app
      app.main();
      await tester.pumpAndSettle();
      
      // Navigate to registration
      await tester.tap(find.text('Kayıt Ol'));
      await tester.pumpAndSettle();
      
      // Fill registration form
      await tester.enterText(
        find.byKey(const Key('name_field')),
        'Test User',
      );
      await tester.enterText(
        find.byKey(const Key('email_field')),
        'test@example.com',
      );
      await tester.enterText(
        find.byKey(const Key('phone_field')),
        '5551234567',
      );
      await tester.enterText(
        find.byKey(const Key('password_field')),
        'Test123!',
      );
      
      // Submit registration
      await tester.tap(find.text('Devam Et'));
      await tester.pumpAndSettle();
      
      // Verify OTP screen
      expect(find.text('Doğrulama Kodu'), findsOneWidget);
      
      // Enter OTP
      await tester.enterText(
        find.byKey(const Key('otp_field')),
        '123456',
      );
      
      await tester.tap(find.text('Doğrula'));
      await tester.pumpAndSettle();
      
      // KYC Process
      expect(find.text('Kimlik Doğrulama'), findsOneWidget);
      
      // Continue with KYC steps...
    });
  });
}
```

---

## 9. CI/CD Pipeline {#cicd}

### 9.1 GitHub Actions Workflow

```yaml
# .github/workflows/main.yml
name: Boğaziçi Barter CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  FLUTTER_VERSION: '3.16.0'
  JAVA_VERSION: '11'
  RUBY_VERSION: '3.0'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Run analyzer
        run: flutter analyze
      
      - name: Run tests
        run: flutter test --coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
      
      - name: Check formatting
        run: dart format --set-exit-if-changed .
  
  build-android:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'adopt'
      
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
      
      - name: Configure Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          echo "storeFile=keystore.jks" >> android/key.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
      
      - name: Build APK
        run: flutter build apk --release
      
      - name: Build App Bundle
        run: flutter build appbundle --release
      
      - name: Upload to Play Store
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT }}
          packageName: com.bogazicibarter.app
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal
  
  build-ios:
    needs: test
    runs-on: macos-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
      
      - name: Install Apple Certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.P12_BASE64 }}
          p12-password: ${{ secrets.P12_PASSWORD }}
      
      - name: Install Provisioning Profile
        run: |
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          echo -n "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode --output $PP_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      
      - name: Build IPA
        run: |
          flutter build ios --release --no-codesign
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            -archivePath $PWD/build/Runner.xcarchive \
            archive
          xcodebuild -exportArchive \
            -archivePath $PWD/build/Runner.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath $PWD/build/ios
      
      - name: Upload to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ios/build/ios/Runner.ipa
          issuer-id: ${{ secrets.APP_STORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APP_STORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APP_STORE_API_PRIVATE_KEY }}
```

---

## 10. Performans Metrikleri {#performans}

### 10.1 Performance Monitoring

```dart
// lib/core/monitoring/performance_monitor.dart
class PerformanceMonitor {
  static final _instance = PerformanceMonitor._internal();
  factory PerformanceMonitor() => _instance;
  PerformanceMonitor._internal();
  
  final FirebasePerformance _performance = FirebasePerformance.instance;
  final Map<String, Trace> _traces = {};
  final Map<String, HttpMetric> _httpMetrics = {};
  
  // App launch time
  Future<void> measureAppLaunch() async {
    final trace = _performance.newTrace('app_launch');
    await trace.start();
    
    // Measure different phases
    trace.putAttribute('phase', 'initialization');
    await _initializeApp();
    
    trace.putAttribute('phase', 'dependency_injection');
    await _setupDependencies();
    
    trace.putAttribute('phase', 'ui_ready');
    await trace.stop();
  }
  
  // API response time
  Future<T> measureApiCall<T>({
    required String endpoint,
    required Future<T> Function() apiCall,
  }) async {
    final metric = _performance.newHttpMetric(
      endpoint,
      HttpMethod.Get,
    );
    
    await metric.start();
    
    try {
      final result = await apiCall();
      
      metric.httpResponseCode = 200;
      metric.responseContentType = 'application/json';
      
      await metric.stop();
      return result;
    } catch (e) {
      metric.httpResponseCode = 500;
      await metric.stop();
      rethrow;
    }
  }
  
  // Image loading performance
  Future<void> measureImageLoad(String imageUrl) async {
    final trace = _performance.newTrace('image_load');
    trace.putAttribute('url', imageUrl);
    
    await trace.start();
    
    try {
      await CachedNetworkImageProvider(imageUrl).resolve(
        const ImageConfiguration(),
      );
      
      trace.putMetric('success', 1);
    } catch (e) {
      trace.putMetric('failure', 1);
    } finally {
      await trace.stop();
    }
  }
  
  // Frame rendering performance
  void measureFrameRendering() {
    SchedulerBinding.instance.addTimingsCallback((timings) {
      for (final timing in timings) {
        final buildDuration = timing.buildDuration.inMilliseconds;
        final rasterDuration = timing.rasterDuration.inMilliseconds;
        
        if (buildDuration > 16 || rasterDuration > 16) {
          // Jank detected
          FirebaseCrashlytics.instance.log(
            'Jank detected: build=$buildDuration ms, raster=$rasterDuration ms',
          );
        }
        
        // Send metrics to Firebase
        _performance.newTrace('frame_rendering')
          ..putMetric('build_duration', buildDuration)
          ..putMetric('raster_duration', rasterDuration)
          ..start()
          ..stop();
      }
    });
  }
}
```

### 10.2 KPI Dashboard

```dart
// lib/presentation/pages/admin/analytics_dashboard_page.dart
class AnalyticsDashboardPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return BlocBuilder<AnalyticsBloc, AnalyticsState>(
      builder: (context, state) {
        if (state is AnalyticsLoaded) {
          return Scaffold(
            appBar: AppBar(title: Text('Analytics Dashboard')),
            body: GridView.count(
              crossAxisCount: 2,
              children: [
                KPICard(
                  title: 'Aktif Kullanıcı (MAU)',
                  value: state.metrics.mau.toString(),
                  target: '10,000',
                  progress: state.metrics.mau / 10000,
                  trend: TrendIndicator.up,
                ),
                KPICard(
                  title: 'Toplam İlan',
                  value: state.metrics.totalListings.toString(),
                  target: '5,000',
                  progress: state.metrics.totalListings / 5000,
                ),
                KPICard(
                  title: 'Barter İşlemi',
                  value: state.metrics.completedBarters.toString(),
                  target: '1,000',
                  progress: state.metrics.completedBarters / 1000,
                ),
                KPICard(
                  title: 'Ortalama Puan',
                  value: state.metrics.avgRating.toStringAsFixed(1),
                  target: '4.5',
                  progress: state.metrics.avgRating / 5,
                ),
                KPICard(
                  title: 'Ödeme İşlemi',
                  value: state.metrics.paymentCount.toString(),
                  target: '500',
                  progress: state.metrics.paymentCount / 500,
                ),
                KPICard(
                  title: 'Uygulama Açılış',
                  value: '${state.metrics.appLaunchTime} ms',
                  target: '< 1500 ms',
                  progress: state.metrics.appLaunchTime < 1500 ? 1.0 : 0.5,
                ),
                KPICard(
                  title: 'Crash Oranı',
                  value: '${state.metrics.crashRate}%',
                  target: '< 0.5%',
                  progress: state.metrics.crashRate < 0.5 ? 1.0 : 0.3,
                  trend: TrendIndicator.down,
                ),
                KPICard(
                  title: 'API Yanıt Süresi',
                  value: '${state.metrics.avgApiResponse} ms',
                  target: '< 200 ms',
                  progress: state.metrics.avgApiResponse < 200 ? 1.0 : 0.5,
                ),
              ],
            ),
          );
        }
        return LoadingWidget();
      },
    );
  }
}
```

---

## 🚀 Codex CLI Komutları

### Proje Başlatma
```bash
codex init project --name=bogazici-barter --platform=flutter --architecture=clean
codex generate structure --from=prd.yaml
codex install dependencies --from=pubspec.yaml
```

### Feature Modülleri Oluşturma
```bash
# Authentication
codex generate feature --name=auth --with=bloc,repository,usecases,pages
codex generate kyc-flow --steps=identity,face,address --providers=kimliksiz,yoti

# Listings
codex generate feature --name=listing --with=crud,filters,search,pagination
codex generate wizard --name=create-listing --steps=6

# Payments
codex generate payment-integration --providers=papara,tosla,iyzico,paytr
codex generate payment-flow --with=escrow,3dsecure,webhooks

# Chat
codex generate chat-module --provider=stream --with=websocket,push-notifications

# Admin
codex generate admin-panel --modules=moderation,analytics,reports
```

### Test Oluşturma
```bash
codex generate tests --type=unit,widget,integration --coverage=80
codex run tests --parallel --with-coverage
```

### Deployment
```bash
codex build --platform=android --flavor=production --obfuscate
codex build --platform=ios --flavor=production --obfuscate
codex deploy --target=play-store --track=internal
codex deploy --target=app-store --testflight
```

---

## 📊 Başarı Kriterleri

| Metrik | Hedef (3 Ay) | Ölçüm Yöntemi |
|--------|--------------|---------------|
| **Kullanıcı Metrikleri** |
| Kayıtlı Kullanıcı | 15,000 | Firebase Analytics |
| MAU (Monthly Active Users) | 10,000 | Custom Analytics |
| DAU (Daily Active Users) | 2,000 | Custom Analytics |
| Retention Rate (7 gün) | %40 | Mixpanel |
| **İlan Metrikleri** |
| Toplam İlan | 5,000 | Database Query |
| Günlük Yeni İlan | 50+ | Database Query |
| İlan Dönüşüm Oranı | %15 | Custom Analytics |
| **İşlem Metrikleri** |
| Tamamlanan Barter | 1,000 | Transaction Log |
| Aylık İşlem Hacmi | 500,000 TL | Payment Gateway |
| Ortalama İşlem Değeri | 500 TL | Calculation |
| **Teknik Metrikler** |
| App Launch Time | < 1.5s | Firebase Performance |
| API Response Time | < 200ms | Custom Monitoring |
| Crash-free Rate | > 99.5% | Firebase Crashlytics |
| App Store Rating | 4.5+ | Store Reviews |

---

## 📝 Sonuç

Bu PRD, **Boğaziçi Barter** Flutter uygulamasının tüm teknik ve iş gereksinimlerini kapsamaktadır. Türkiye'deki popüler ödeme sistemleri entegre edilmiş, güvenlik önlemleri alınmış ve ölçeklenebilir bir mimari tasarlanmıştır.

### Teslim Edilecekler:
1. ✅ Flutter mobil uygulama (iOS & Android)
2. ✅ Admin web paneli
3. ✅ RESTful API backend
4. ✅ Ödeme entegrasyonları (7 farklı sistem)
5. ✅ Gerçek zamanlı chat sistemi
6. ✅ Push notification servisi
7. ✅ Analytics dashboard
8. ✅ Teknik dokümantasyon
9. ✅ API dokümantasyonu
10. ✅ Deployment scripter

**Tahmini Geliştirme Süresi: 12-14 Hafta**

Detaylı sorularınız veya ek gereksinimleriniz için hazırım! 🚀